<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenRiaServices.LinqToSql</name>
    </assembly>
    <members>
        <member name="T:OpenRiaServices.LinqToSql.DataContextExtensions">
            <summary>
            DataContext extension methods useful to LinqToSqlDomainService authors
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.DataContextExtensions.IsAttached(System.Data.Linq.ITable,System.Object)">
            <summary>
            Extension method used to determine if the specified entity is currently attached
            </summary>
            <param name="table">The entity table</param>
            <param name="entity">The entity to check</param>
            <returns>True if the entity is currently attached, false otherwise</returns>
        </member>
        <member name="T:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1">
            <summary>
            Base class for DomainServices operating on LINQ To SQL data models
            </summary>
            <typeparam name="TContext">Type of DomainContext to instantiate the LinqToSqlDomainService with</typeparam>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.#ctor">
            <summary>
            Protected constructor
            </summary>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.DataContext">
            <summary>
            Gets the DataContext for this service
            </summary>
            <value>This property always gets the current DataContext.  If it has not yet been created,
            it will create one.
            </value>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.Initialize(OpenRiaServices.Server.DomainServiceContext)">
            <summary>
            Initializes this <see cref="T:OpenRiaServices.Server.DomainService"/>. <see cref="M:OpenRiaServices.Server.DomainService.Initialize(OpenRiaServices.Server.DomainServiceContext)"/> must be called 
            prior to invoking any operations on the <see cref="T:OpenRiaServices.Server.DomainService"/> instance.
            </summary>
            <param name="context">The <see cref="T:OpenRiaServices.Server.DomainServiceContext"/> for this <see cref="T:OpenRiaServices.Server.DomainService"/>
            instance. Overrides must call the base method.</param>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Gets the number of rows in an <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
            <typeparam name="T">The element Type of the query.</typeparam>
            <param name="query">The query for which the count should be returned.</param>
            <param name="cancellationToken">unused</param>
            <returns>The total number of rows.</returns>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.Dispose(System.Boolean)">
            <summary>
            See <see cref="T:System.IDisposable"/>
            </summary>
            <param name="disposing">A <see cref="T:System.Boolean"/> indicating whether or not the instance is being disposed.</param>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.PersistChangeSetAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called to finalize changes after all the operations in the specified changeset
            have been invoked. All changes are committed to the DataContext.
            <remarks>If the submit fails due to concurrency conflicts <see cref="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.ResolveConflicts(System.Data.Linq.ChangeConflictCollection)"/> will be called.
            If <see cref="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.ResolveConflicts(System.Data.Linq.ChangeConflictCollection)"/> returns true a single resubmit will be attempted.
            </remarks>
            </summary>
            <returns>Returns <c>true</c> if the <see cref="T:OpenRiaServices.Server.ChangeSet"/> was persisted successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.ResolveConflicts(System.Data.Linq.ChangeConflictCollection)">
            <summary>
            This method will be called if Submit fails due to optimistic concurrency conflicts.
            Override this method to handle optimistic concurrency conflicts. The base implementation
            returns false.
            </summary>
            <param name="conflicts">The collection of conflicts to resolve.</param>
            <returns>True if all conflicts were resolved, false otherwise. If true is
            returned a resubmit will be attempted.</returns>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.SetChangeSetConflicts(System.Collections.Generic.Dictionary{System.Data.Linq.ObjectChangeConflict,OpenRiaServices.Server.ChangeSetEntry})">
            <summary>
            Updates each entry in the ChangeSet with its corresponding conflict info.
            </summary>
            <param name="operationConflictMap">Map of conflicts to their corresponding operations entries.</param>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainService`1.CreateDataContext">
            <summary>
            Creates and returns the DataContext instance that will be used by this service.
            </summary>
            <returns>The DomainContext</returns>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProvider.GetTypeDescriptor(System.Type,System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Returns a custom type descriptor for the specified entity type
            </summary>
            <param name="objectType">Type of object for which we need the descriptor</param>
            <param name="parent">The parent type descriptor</param>
            <returns>a custom type descriptor for the specified entity type</returns>
        </member>
        <member name="T:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProviderAttribute">
            <summary>
            Attribute applied to a <see cref="T:OpenRiaServices.Server.DomainService"/> that exposes LINQ to SQL mapped
            Types.
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProviderAttribute.#ctor">
            <summary>
            Default constructor. Using this constructor, the Type of the LINQ to SQL
            DataContext will be inferred from the <see cref="T:OpenRiaServices.Server.DomainService"/> the
            attribute is applied to.
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructs an attribute for the specified LINQ to SQL
            DataContext Type.
            </summary>
            <param name="dataContextType">The LINQ to SQL DataContext Type.</param>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProviderAttribute.DataContextType">
            <summary>
            The LINQ to SQL DataContext Type.
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProviderAttribute.CreateProvider(System.Type,OpenRiaServices.Server.DomainServiceDescriptionProvider)">
            <summary>
            This method creates an instance of the <see cref="T:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProvider"/>.
            </summary>
            <param name="domainServiceType">The <see cref="T:OpenRiaServices.Server.DomainService"/> Type to create a description provider for.</param>
            <param name="parent">The existing parent description provider.</param>
            <returns>The description provider.</returns>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlDomainServiceDescriptionProviderAttribute.GetContextType(System.Type)">
            <summary>
            Extracts the context type from the specified <paramref name="domainServiceType"/>.
            </summary>
            <param name="domainServiceType">A LINQ to SQL domain service type.</param>
            <returns>The type of the data context.</returns>
        </member>
        <member name="T:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptionContext">
            <summary>
            Class that provides the basic metadata interface to a LINQ To SQL data context.
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptionContext.#ctor(System.Type)">
            <summary>
            Constructor that creates a metadata context for the specified LINQ To SQL domain service type
            </summary>
            <param name="dataContextType">The DataContext type</param>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptionContext.MetaModel">
            <summary>
            Gets the MetaModel containing the metadata
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptionContext.CreateAssociationAttribute(System.Data.Linq.Mapping.MetaDataMember)">
            <summary>
            Returns an AssociationAttribute for the specified association member
            </summary>
            <param name="member">The metadata member corresponding to the association member</param>
            <returns>The Association attribute</returns>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptionContext.GetAssociationName(System.Data.Linq.Mapping.MetaAssociation)">
            <summary>
            Returns a unique association name for the specified MetaAssociation
            </summary>
            <param name="metaAssociation">A <see cref="T:System.Data.Linq.Mapping.MetaAssociation"/>.</param>
            <returns>A <see cref="T:System.String"/> containing the association name.</returns>
        </member>
        <member name="T:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptor">
            <summary>
            CustomTypeDescriptor for LINQ To SQL entities
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptor.#ctor(OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptionContext,System.Data.Linq.Mapping.MetaType,System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Constructor that takes the metadata context, a metadata type and a parent custom type descriptor
            </summary>
            <param name="typeDescriptionContext">The <see cref="T:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptionContext"/> context.</param>
            <param name="metaType">The <see cref="T:System.Data.Linq.Mapping.MetaType"/> type.</param>
            <param name="parent">The parent custom type descriptor.</param>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptor.TypeDescriptionContext">
            <summary>
            Gets the metadata context
            </summary>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptor.GetMemberAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns a collection of all the <see cref="T:System.Attribute"/>s we infer from the metadata associated
            with the metadata member corresponding to the given property descriptor
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/>.</param>
            <returns>A collection of attributes inferred from metadata in the given descriptor.</returns>
        </member>
        <member name="M:OpenRiaServices.LinqToSql.LinqToSqlTypeDescriptor.InferStringLengthAttribute(System.String,System.Collections.Generic.List{System.Attribute})">
            <summary>
            Parse the DbType to determine whether a StringLengthAttribute should be added.
            </summary>
            <param name="dbType">The DbType from the MetaDataMember.</param>
            <param name="attributes">The list of attributes to append to.</param>
        </member>
        <member name="T:OpenRiaServices.LinqToSql.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.Resource.DatabaseGeneratedOptionNotDefined">
            <summary>
              Looks up a localized string similar to DatabaseGeneratedOption value &apos;{0}&apos; is not defined..
            </summary>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.Resource.InvalidLinqToSqlDomainServiceDescriptionProviderSpecification">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; must derive from DataContext to be a valid parameter for LinqToSqlDomainServiceDescriptionProviderAttribute..
            </summary>
        </member>
        <member name="P:OpenRiaServices.LinqToSql.Resource.InvalidMetadataProviderSpecification">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot be applied to DomainService Type &apos;{1}&apos; because &apos;{1}&apos; does not derive from &apos;{2}&apos;..
            </summary>
        </member>
        <member name="T:OpenRiaServices.Server.TypeDescriptionContextBase">
            <summary>
            Base class for LTS and EF type description contexts
            </summary>
        </member>
        <member name="M:OpenRiaServices.Server.TypeDescriptionContextBase.MakeUniqueName(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a suggested name and a collection of existing names, this method
            creates a unique name by appending a numerix suffix as required.
            </summary>
            <param name="suggested">The desired name</param>
            <param name="existing">Collection of existing names</param>
            <returns>The unique name</returns>
        </member>
        <member name="M:OpenRiaServices.Server.TypeDescriptionContextBase.FormatMemberList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Comma delimits the specified member name collection
            </summary>
            <param name="members">A collection of members.</param>
            <returns>A comma delimited list of member names.</returns>
        </member>
        <member name="T:OpenRiaServices.Server.TypeDescriptorBase">
            <summary>
            CustomTypeDescriptor base type shared by LINQ To SQL and LINQ To Entities
            </summary>
        </member>
        <member name="M:OpenRiaServices.Server.TypeDescriptorBase.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Main constructor that accepts the parent custom type descriptor
            </summary>
            <param name="parent">The parent custom type descriptor.</param>
        </member>
        <member name="M:OpenRiaServices.Server.TypeDescriptorBase.GetProperties">
            <summary>
            Override of the <see cref="M:System.ComponentModel.CustomTypeDescriptor.GetProperties"/> to obtain the list
            of properties for this type.
            </summary>
            <remarks>
            This method is overridden so that it can merge this class's parent attributes with those
            it infers from the DAL-specific attributes.
            </remarks>
            <returns>A list of properties for this type</returns>
        </member>
        <member name="M:OpenRiaServices.Server.TypeDescriptorBase.GetMemberAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Abstract method specific DAL implementations must override to return the
            list of RIA <see cref="T:System.Attribute"/>s implied by their DAL-specific attributes
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> to examine.</param>
            <returns>A list of RIA attributes implied by the DAL specific attributes</returns>
        </member>
        <member name="M:OpenRiaServices.Server.TypeDescriptorBase.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a <see cref="T:System.Nullable"/>
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the given type is a nullable type</returns>
        </member>
    </members>
</doc>
